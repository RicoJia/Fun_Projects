<launch>
<!-- ==============================All Custom Switches================================== -->
  <arg name="run_in_gazebo" value="false"/>

<!-- ==============================Basic Configs================================== -->

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <node name="$(anon rviz)" launch-prefix="" pkg="rviz" type="rviz" respawn="false"
        args="-d $(find rjje_arm)/rviz/moveit.rviz" output="screen">
  </node>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <!-- RJ: joint_state_publisher is only launched when we test with fake execution -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg run_in_gazebo)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

<!-- ==============================planning_context================================== -->

  <!-- Load universal robot description format (URDF) -->
  <param name="robot_description" command="xacro '$(find rjje_arm)/urdf/rjje_arm.xacro.urdf'"/>

  <!-- The semantic description that corresponds to the URDF -->
  <param name="robot_description_semantic" textfile="$(find rjje_arm)/config/rjje_arm.srdf" />

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find rjje_arm)/config/joint_limits.yaml"/>
    <rosparam command="load" file="$(find rjje_arm)/config/cartesian_limits.yaml"/>
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="robot_description_kinematics">
    <rosparam command="load" file="$(find rjje_arm_moveit_config)/config/kinematics.yaml"/>
  </group>

<!-- ==============================planning_pipelines================================== -->
  <!-- TODO: are these run at the same time? -->
  <group ns="move_group/planning_pipelines">
    <!-- OMPL -->
    <include ns="ompl" file="$(find rjje_arm)/launch/ompl_planning_pipeline.launch.xml"/>
    <include ns="chomp" file="$(find rjje_arm)/launch/chomp_planning_pipeline.launch.xml"/>
    <!-- add custom planning pipeline -->
  </group>

<!-- ==============================Trajectory Execution================================== -->
<!-- MoveIt is allowed to load/unload or switch controllers -->
<group ns="move_group">
  <param name="moveit_manage_controllers" value="true"/>
  <!-- When determining the expected duration of a trajectory, this multiplicative factor is applied to get the allowed duration of execution -->
  <param name="trajectory_execution/allowed_execution_duration_scaling" value="1.2"/> 
  <!-- Allow more than the expected execution time before triggering a trajectory cancel (applied after scaling) -->
  <param name="trajectory_execution/allowed_goal_duration_margin" value="0.5"/> 
  <!-- Allowed joint-value tolerance for validation that trajectory's first point matches current robot state -->
  <param name="trajectory_execution/allowed_start_tolerance" value="0.01"/> 
  <!-- Load the robot specific controller manager; this sets the moveit_controller_manager ROS parameter -->
  <!-- TODO: change to rjje_arm -->
  <arg name="moveit_controller_manager" default="rjje_arm" if ="$(arg run_in_gazebo)"/>
  <arg name="moveit_controller_manager" default="fake" unless="$(arg run_in_gazebo)"/>
  <!-- TODO to comment this out -->
  <include file="$(find rjje_arm)/launch/$(arg moveit_controller_manager)_moveit_controller_manager.launch.xml">
    <!-- <arg name="execution_type" value="interpolate" /> -->
  </include>
</group>

<!-- ================================================================ -->
  <arg name="allow_trajectory_execution" value="true"/>
  <arg name="info" value="true"/>
  <arg name="pipeline" default="ompl" />
  <arg name="debug" default="false" />

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find rjje_arm)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="rjje_arm" />
  </include>

    <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="1"/>
    <param name="jiggle_fraction" value="0.05" />
    <param name="default_planning_pipeline" value="$(arg pipeline)" />
    <param name="capabilities" value="" />
    <param name="disable_capabilities" value="" />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="true" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="true" />
    <param name="planning_scene_monitor/publish_state_updates" value="true" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="true" />
  </node>

<!-- ============================== Gazebo ================================== -->
  <include file="$(find rjje_arm)/launch/launch_gazebo/gazebo.launch" if="$(arg run_in_gazebo)">
    <arg name="run_control_node" value="true" />
  </include>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" unless="$(arg run_in_gazebo)"/>
<!-- ============================== Motion Controller ================================== -->
<!-- TODO -->
<node name="motion_controller" type="motion_controller.py" pkg="rjje_arm" output="screen">
  <param name="broker_ip" value="127.0.0.1" if ="$(arg run_in_gazebo)" />
  <param name="broker_ip" value="100.66.47.31" unless ="$(arg run_in_gazebo)" />
</node>
</launch>