#! /usr/bin/python3
"""
This script is to:
    1. Listen to /camera/color/image_raw(sensor_msgs/Image), get the image
    2. Get point cloud data, and see the depth of each point
    3. Use YOLO-V5 to do image recognition
"""
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image, PointCloud2
import sensor_msgs.point_cloud2 as pc2
from cv_bridge import CvBridge
import cv2
import numpy as np
import threading
import time

from yolo_detect import YoloDetector
from multiprocessing import Queue
from queue import Empty, Full
from multiprocessing import  Process
import signal
import os
import cv2

class ObjectTracker(object):
    def __init__(self, visualize=False):
        self.bridge = CvBridge()
        self.img_sub = rospy.Subscriber("/camera/color/image_raw", Image, self.img_cb)
        self.aligned_pt_cloud_sub = rospy.Subscriber("/camera/depth/color/points", PointCloud2, self.pt_cloud_cb)
        self.pt_cloud_aligned = []
        self.pt_cloud_lock = threading.Lock()

        self.input_queue = Queue(maxsize = 1)
        self.output_queue = Queue(maxsize = 1)
        def process_func(input_queue, output_queue, visualize): 
            yolo_detector = YoloDetector(input_queue = input_queue, output_queue = output_queue, visualize=visualize)
            yolo_detector.run()
        self.yolo_proc = Process(target=process_func, args=(self.input_queue, self.output_queue, visualize))
        self.yolo_proc.start()
        rospy.loginfo("Successfully Launched object tracker")

        #TODO
        self.time = time.time()

    def on_shutdown(self): 
        """
        Function called by ros upon shutdown. Need to be called explicitly as ros doesn't call __del__ automatically? 
            - but after sending shutdown signal, we can close the queues and processes
            - rospy.on_shutdown(cb) calls cb after some objects get destructed
        """
        os.kill(self.yolo_proc.pid, signal.SIGUSR2)
        self.yolo_proc.join()

        self.output_queue.close()
        self.output_queue.join_thread()
        self.input_queue.close()
        self.input_queue.join_thread()

    def pt_cloud_cb(self, msg): 
        """
        Intel realsense D415 runs at around 15hz
        """
        height, width = msg.height, msg.width
        pt_cloud_gen = pc2.read_points(msg, skip_nans=False, field_names=("x", "y", "z"))
        pt_cloud_aligned = []
        for v in range(height):
            current_row = []
            for u in range(width):
                current_row.append((next(pt_cloud_gen)))
            pt_cloud_aligned.append(current_row)
        with self.pt_cloud_lock: 
            self.pt_cloud_aligned = pt_cloud_aligned

    def img_cb(self, msg): 
         raw_img = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
         try: 
             # self.input_queue.put(raw_img)
             self.input_queue.put_nowait(raw_img)
         except Full: 
             print("queue full, flushin'")
             pass
         
    # def get_coord_at_pixel(self, uv): 
    #     u, v = uv
    #     if self.cv_image is not None and self.pt_cloud_aligned: 
    #         with self.pt_cloud_lock: 
    #             print(f"coord: {self.pt_cloud_aligned[v][u]}")
    #         cv2.circle(self.cv_image, tuple(uv), 1, color=(0, 0, 255), thickness=2)
    #         cv2.imshow("img", self.cv_image)
    #         cv2.waitKey(1)

    def find_object_pos(self): 
        """
        The long running function that 1. takes in Yolo Detected images 2. Find the x,y position of each object in camera view
        """
        try: 
            detection = self.output_queue.get(block = False)
            now = time.time()
            print("frame time: ", now - self.time)
            self.time = now
            # print("det: ", detection)
        except Empty:
            pass

if __name__ == '__main__': 
    rospy.init_node("object_tracking", anonymous=True)     #anonymous=true ensures unique node name by adding random numbers
    rate = rospy.Rate(20)
    visualize = rospy.get_param('~visualize', False)
    print("==============================", visualize)
    ot = ObjectTracker(visualize=visualize)
    while not rospy.is_shutdown(): 
        # for opencv, it's (width, height)
        ot.find_object_pos()
        rate.sleep() 
    ot.on_shutdown()


